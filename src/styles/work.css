- 从输入URL到显示页面，经过了哪些流程
- react hook组件和class组件有啥区别  为什么现在的趋势都是hooks组件
- react 15升级16为啥像 will_mount的声明周期会被删掉 这么做的原因是啥
- 浏览器缓存

1.webpack 打包的流程是怎么样的 
2.webpack 的是怎么解决循环依赖的问题
3.webpack是怎么把模块全部找出来的（我说了通过ast）
4.高版本浏览器的特性，低版本不支持需要poilly，原理是啥？babel的poilly和webpack的是一样吗？有什么区别（没怎么答对）
5. 说一下需要打补丁的js的语法？装饰器是怎么实现的？
6.AST是什么，import的AST结构大概是啥样的，你自己玩过ast吗 
7.npm yarn pnpm 了解吗？有啥区别？
8.pnpm的包是通过软连接还是硬链接？软连接和硬链接有啥区别？
9.使用pnpm的话,node_modules里面的.pnpm文件夹里存放的是啥？（我好像答错了 不太记得了 pnpm用的比较少）
10.静态语言如java， 跟js相比，为什么他们需要编译，js不需要？
11.我说了了js的执行原理，接着问,字节码是什么？字节码和二进制码一样吗？
12.你平时都是怎么学习的

1.react的PureComponent 做了什么事？
2.封装组件，传递一个jsx的props，怎么校验合法性, 那我传一个数字6能通过校验吗？
3. Class组件的一些声明周期在Hook组件里面分别是怎么对应的？
4. useEffect和useLayoutEffect有什么区别
5. useCallback和useMemo有什么区别，使用场景是什么？
6. useMemo和React.memo的区别又是啥？
7. useRef的使用场景
8. 两个useEffect，都返回了卸载函数，并且都依赖了一个对象，对象有一个属性，这个属性被修改的时候，这两个useEffect的卸载函数的执行情况是怎么样的
9. 让你实现一个useUnMount的卸载的hooks,你怎么实现


querySelectorAll 和 getElementsByClassName 区别
浏览器绘制的过程,布局计算是哪个阶段
如何跨域传递cookie
什么是跨域
== 和 === 区别
js 类型有哪些
什么是this
怎么实现bind
es6继承和es5区别
什么是函数柯里化
object.definedProperty和proxy区别
writable 和configable区别,什么是否可逆
react fiber架构了解,fiber结点有什么属性
如何判断class组件和函数组件 Component.isReactComponent
如何理解hook
useEffect和useLayoutEffect区别
状态管理用哪个, redux和mobx原理
使用context注意哪些问题
class的setState和hook setState区别
react 有什么局限性(缺点)
react框架本身做了哪些安全操作 (xss)
如何避免csrf攻击(token,cookie同源,crossOrign samesite)
webpack5 更新了什么功能,
如何实现webpack插件
tapable原理
contenthash和chunkhash 区别,
https的过程,
s指的是什么

Promsie实现一下



1. 从输入URL到显示页面，经过了哪些流程？

一般来说，从输入URL到显示页面经历了以下流程：

1. DNS 解析：将 URL 中的域名解析成 IP 地址。
2. 建立 TCP 连接：通过三次握手建立客户端与服务器的连接。
3. 发送 HTTP 请求：客户端向服务器发送 HTTP 请求。
4. 服务器处理请求并返回 HTTP 响应：服务器收到客户端的请求后进行处理，并将处理结果封装在 HTTP 响应中返回给客户端。
5. 浏览器解析渲染页面：浏览器接收到服务器返回的 HTTP 响应后，开始解析 HTML 文件，构建 DOM 树、CSSOM 树，并生成渲染树，最终将页面呈现出来。
6. react hook组件和class组件有什么区别？为什么现在的趋势都是hooks组件？

React 中，Hook 是一种让你在函数组件中“钩入” React state 及生命周期等特性的方式。与 Class 组件相比，Hook 组件有以下优势：

1. 更容易理解和编写：Hook 将代码分解成更小、更易于理解的函数，同时让你更容易复用这些函数。
2. 更容易测试：Hook 组件使你能够编写更易于测试的代码，而且测试代码更容易编写。
3. 更容易重用状态逻辑：你可以使用自定义 Hook 将组件中的状态逻辑提取到单独的函数中进行重用。
4. 避免 Class 组件中的 this 问题：在 Class 组件中，你需要手动绑定 this 或使用箭头函数来避免 this 问题，而在 Hook 组件中，没有 this 的问题。

因为 Hook 组件的优点和方便性，所以现在的趋势都是使用 Hook 组件，而不是 Class 组件。

1. React 15 升级 16 为什么像 will_mount 的声明周期会被删掉？这么做的原因是什么？

React 16 中删除了 componentWillMount 声明周期方法。原因是 React 团队在设计新的异步渲染机制时，发现 componentWillMount 会造成一些不可预期的问题。比如，如果在 componentWillMount 中使用 setState 来修改组件的状态，那么这些修改会被视为同步的，从而会导致一些不可预期的结果。

为了解决这个问题，React 团队在 16 版本中引入了新的生命周期方法 getDerivedStateFromProps 和 getSnapshotBeforeUpdate，并将 componentWillReceiveProps、componentWillUpdate 和 componentWillUpdate 三个方法合并为一个新的生命周期方法 componentDidUpdate。这些新的生命周期方法可以更好地支持异步渲染，并且可以避免出现不可预期的问题。



1. webpack 打包的流程是怎么样的？
    答：Webpack 的打包流程大致分为以下几个步骤：解析配置文件，解析入口文件及其依赖，编译模块，输出打包文件。

2. webpack 的是怎么解决循环依赖的问题？
    答：Webpack 通过使用模块标识符来解决循环依赖问题。当一个模块被引用时，Webpack 会先去检查该模块是否已经被加载过，如果已经加载过，则直接返回已加载的模块对象，如果没有加载过，则会将该模块的标识符加入到已加载模块的缓存中，并开始加载该模块的依赖模块，这样可以保证每个模块只被加载一次。

3. webpack 是怎么把模块全部找出来的？
    答：Webpack 通过解析入口文件及其依赖来找出所有需要打包的模块。Webpack 会使用 acorn 或者 babel-parser 将入口文件及其依赖解析成 AST（抽象语法树） ，然后遍历 AST 中的 ImportDeclaration 和 RequireExpression ，找出所有依赖的模块，直到所有的依赖都被找出来。

4. 高版本浏览器的特性，低版本不支持需要 polyfill，原理是啥？babel 的 polyfill 和 webpack 的是一样吗？有什么区别？
    答：高版本浏览器的特性在低版本浏览器中没有实现，需要使用 polyfill 进行填充。Polyfill 的原理是检测当前浏览器是否支持某个特性，如果不支持，则提供一个函数实现该特性，这样在代码中使用该特性时，就可以正常运行了。Babel 的 polyfill 和 Webpack 的 polyfill 是不同的，Babel 的 polyfill 主要是将 ECMAScript 2015+ 的新特性转换成 ES5 代码，而 Webpack 的 polyfill 主要是提供浏览器 API 的兼容实现。

5. 说一下需要打补丁的 JS 的语法？装饰器是怎么实现的？
    答：需要打补丁的 JS 语法一般是指新的 ECMAScript 规范中新增的语法，例如 async/await、Promise 等。这些语法在旧版本的浏览器中不被支持，需要使用 polyfill 或者打补丁来实现。 装饰器是一种语法糖，用于简化代码的编写，它可以修饰类、属性和方法等。装饰器的实现主要依靠 ES2016 规范中的提案，通过对类、属性、方法等进行包装

6. AST是什么，import的AST结构大概是啥样的，你自己玩过ast吗？
    答：AST（Abstract Syntax Tree）是源代码的抽象语法结构的树状表示。通过解析源代码，可以将代码转化为AST，以便于对代码进行分析和转换。 import 语句的AST结构一般包含一个 type 属性，表示节点的类型是 ImportDeclaration，还包含 source 和 specifiers 属性，分别表示导入的模块和导入的内容。我有使用过AST工具，比如Babel和Esprima。

7. npm yarn pnpm 了解吗？有啥区别？
    答：npm、yarn和pnpm都是用来管理Node.js包和依赖的工具。npm是Node.js的默认包管理器，yarn是Facebook开发的一款包管理器，而pnpm是一个类似yarn的第三方包管理器，它通过硬链接来共享本地安装的依赖，避免了大量的重复下载和存储。相比于npm和yarn，pnpm在性能和磁盘空间的利用上更有优势。

8. pnpm的包是通过软连接还是硬链接？软连接和硬链接有啥区别？
    答：pnpm的包是通过硬链接实现的。软链接和硬链接都是用于在文件系统中创建链接的方法，区别在于软链接创建的是一个指向目标文件的指针，而硬链接创建的是一个指向目标文件的新文件名。硬链接只能在同一文件系统中创建，而软链接可以跨越不同的文件系统。由于硬链接创建的是一个新的文件名，因此即使原文件被删除，硬链接仍然存在，而软链接则会失效。

9. 使用pnpm的话,node_modules里面的.pnpm文件夹里存放的是啥？
    答：在使用pnpm管理依赖时，node_modules目录中会生成一个.pnpm文件夹，用于存放与依赖相关的元数据和文件缓存。其中的文件缓存可以避免重复下载和存储相同的依赖包，提高依赖包的安装速度和磁盘空间的利用率。

10. 静态语言如java， 跟js相比，为什么他们需要编译，js不需要？ 

    回答：静态语言如Java需要编译，是因为在编译期间就能检测到代码中的错误，而JS是一种动态语言，其代码在运行时才会被解释器执行，因此不需要编译。

11. 我说了了JS的执行原理，接着问，字节码是什么？字节码和二进制码一样吗？ 

    回答：字节码是一种类似于二进制码的中间形式，其主要作用是为了提高代码的执行效率。在Java中，编译后的代码被转换成字节码，这些字节码可以在JVM上运行。而在JavaScript中，由于它是一种解释性语言，因此并没有字节码的概念。相反，JavaScript的代码会被解释器直接执行。

12. 你平时都是怎么学习的？

     回答：我平时学习的方式比较多样化，包括阅读相关的书籍、文档、博客等，观看相关的视频教程，参加在线课程和研讨会，以及自己动手实践。我也会参与一些社区和论坛，与其他人交流和分享经验，从中获取更多的知识和经验。同时，我也会保持对新技术的关注和研究，以跟上技术的发展和变化。

13. react的PureComponent 做了什么事？

​	回答：React的`PureComponent`是一个优化版本的`Component`，它通过实现`shouldComponentUpdate`方法来浅比较组件的`props`和`state`是否改变，从而避免不必要的重渲染。如果`props`和`state`没有变化，就会阻止渲染。这个优化可以在一些场景下提高组件的性能，但是需要注意，当`props`和`state`的数据结构非常复杂时，浅比较也可能会导致错误。

14. 封装组件，传递一个jsx的props，怎么校验合法性, 那我传一个数字6能通过校验吗？

回答：可以使用`prop-types`库来校验组件传递的`props`是否合法。在组件的`propTypes`属性中，可以定义组件需要接收的`props`的类型和是否必须。如果传入的`props`不符合定义，就会在控制台输出一条警告信息。如果你的组件需要接收一个`JSX`的`props`，可以使用`PropTypes.element`或`PropTypes.node`来定义。传入数字6无法通过这种校验。

15. Class组件的一些声明周期在Hook组件里面分别是怎么对应的？

回答：

- `componentDidMount`：`useEffect`。
- `componentDidUpdate`：`useEffect`。
- `componentWillUnmount`：`useEffect`，需要返回一个清除函数来模拟。
- `shouldComponentUpdate`：使用`React.memo`或自定义的`shouldComponentUpdate`方法。
